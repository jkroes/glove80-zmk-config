
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */


/* Automatically generated layer name #define */
#define LAYER_MacOS 0
#define LAYER_PC 1
#define LAYER_Sym 2
#define LAYER_Nav 3
#define LAYER_Num 4
#define LAYER_Magic 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */
&lt {
    quick-tap-ms = <175>;  // Enable quick-tap with 175ms window
};


/* Input Listeners */


/* System behavior and Macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};


/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
behaviors {
    // Forces app switcher to display for at least 900 ms after releasing AppSwitch
    skapp: sticky_key_app_switcher {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <900>;
    };

};

macros {
   ZMK_MACRO(AppSwitch,
        wait-ms = <50>;
        tap-ms = <20>;
        bindings =
                    <&macro_press &kp RGUI>
                  , <&macro_tap &kp TAB>
                  , <&tog LAYER_Nav>
                  , <&macro_pause_for_release>
                  , <&tog LAYER_Nav>
                  //, <&macro_tap &skapp LGUI>
                  , <&macro_release &kp RGUI>
                  ;
   )
};
};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <55 56 57 72 73 74 71 70 69 52 53 54 58 40 28 16 17 5 6 18 29 41 59 75 76 60 42 30 7 19 31 43 61 77 78 79 63 62 44 45 33 32 20 21 9 8>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <72 74 73 57 56 55 71 54 53 70 69 52 64 46 34 22 10 0 1 11 12 23 24 25 36 37 48 49 67 4 14 15 35 47 65 66 68 2 3 13 26 27 38 39 50 51>;
            hold-trigger-on-release;
        };
    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_MacOS {
            bindings = <
               &tog 1        &kp F2       &kp F3        &kp F4       &kp F5                                                                                      &kp F6        &kp F7       &kp F8           &kp F9    &kp F10
            &kp EQUAL        &kp N1       &kp N2        &kp N3       &kp N4  &kp N5                                                                 &kp N6       &kp N7        &kp N8       &kp N9           &kp N0  &kp MINUS
                &none         &kp Q        &kp W         &kp E        &kp R   &kp T                                                                  &kp Y        &kp U         &kp I        &kp O            &kp P   &kp BSLH
             &kp CAPS  &hml LCTRL A  &hml LALT S  &hml LSHFT D  &hml LGUI F   &kp G                                                                  &kp H  &hmr RGUI J  &hmr RSHFT K  &hmr RALT L  &hmr RCTRL SEMI    &kp SQT
                &none         &kp Z        &kp X         &kp C        &kp V   &kp B  &mt LGUI TAB  &kp LSHFT  &kp LALT   &none    &none    &kp ESC   &kp N        &kp M     &kp COMMA      &kp DOT         &kp FSLH      &none
 &magic LAYER_Magic 0         &none    &kp GRAVE      &kp LEFT    &kp RIGHT              &kp BSPC    &kp DEL    &tog 4  &tog 4  &kp RET  &kp SPACE               &kp UP      &kp DOWN     &kp LBKT         &kp RBKT      &none
            >;
        };

        layer_PC {
            bindings = <
 &trans       &trans  &trans  &trans        &trans                                                                               &trans  &trans  &trans          &trans  &trans
 &trans       &trans  &trans  &trans        &trans  &trans                                                         &trans        &trans  &trans  &trans          &trans  &trans
 &trans       &trans  &trans  &trans        &trans  &trans                                                         &trans        &trans  &trans  &trans          &trans  &trans
 &trans  &hml LGUI A  &trans  &trans  &hml LCTRL F  &trans                                                         &trans  &hmr RCTRL J  &trans  &trans  &hmr RGUI SEMI  &trans
 &trans       &trans  &trans  &trans        &trans  &trans  &mt LCTRL ESC  &trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans          &trans  &trans
 &trans       &trans  &trans  &trans        &trans                 &trans  &trans  &trans  &trans  &trans  &trans                &trans  &trans  &trans          &trans  &trans
            >;
        };

        layer_Sym {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Nav {
            bindings = <
  &none   &none     &none     &none      &none                                                                     &none      &none     &none      &none   &none
  &none   &none     &none     &none      &none   &none                                                   &none     &none      &none     &none      &none   &none
  &none   &none  &kp HOME    &kp UP  &kp PG_UP   &none                                                   &none     &none      &none     &none      &none   &none
  &none   &none  &kp LEFT  &kp DOWN  &kp RIGHT   &none                                                   &none  &kp LGUI  &kp LSHFT  &kp LALT  &kp LCTRL   &none
  &none   &none   &kp END     &none  &kp PG_DN   &none   &none   &none   &none   &none   &none   &none   &none     &none      &none     &none      &none   &none
  &none   &none     &none     &none      &none           &none   &none   &none   &none   &none   &none             &none      &none     &none      &none   &none
            >;
        };

        layer_Num {
            bindings = <
  &none   &none   &none   &none   &none                                                                                    &kp ESC       &kp TAB     &kp KP_EQUAL         &kp BSPC   &none
  &none   &none   &none   &none   &none   &none                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_SLASH  &kp KP_MULTIPLY  &kp KP_MULTIPLY   &none
  &none   &none   &none   &none   &none   &none                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8        &kp KP_N9     &kp KP_MINUS   &none
  &none   &none   &none   &none   &none   &none                                                              &kp PRCNT   &kp KP_N4     &kp KP_N5        &kp KP_N6      &kp KP_PLUS   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none              &kp COMMA   &kp KP_N1     &kp KP_N2        &kp KP_N3     &kp KP_ENTER   &none
  &none   &none   &none   &none   &none           &none   &none  &trans  &trans   &none   &none                          &kp KP_N0     &kp KP_N0       &kp KP_DOT     &kp KP_ENTER   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
